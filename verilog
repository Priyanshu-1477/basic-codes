Dataflow Model[1]
module comp_4bit (
input [3:0]a,b,
output ag,bg,eq
);
assign ag = (a[3] & ~b[3]) |
(~(a[3] ^ b[3]) & (a[2] & ~b[2])) |
(~(a[3] ^ b[3]) & (~(a[2] ^ b[2])) & (a[1] & ~b[1])) |
(~(a[3] ^ b[3]) & (~(a[2] ^ b[2])) & (~(a[1] ^ b[1])
& (a[0] & ~b[0]));
assign bg = (b[3] & ~a[3]) |
(~(b[3] ^ a[3]) & (b[2] & ~a[2])) |
(~(b[3] ^ a[3]) & (~(b[2] ^ a[2])) & (b[1] & ~a[1])) |
(~(b[3] ^ a[3]) & (~(b[2] ^ a[2])) & (~(b[1] ^ a[1]))
& (b[0] & a[0]));
assign eq = (~(b[3] ^ a[3])) & (~(b[2] ^ a[2])) & (~(b[1] ^ a[1]))
& (~(b[0] ^ a[0]));
endmodule





Behavioral Model[2]
module comp_4bit (
input [3:0] a,b,
output ag,bg,eq
);
assign ag = a>b;
assign bg = a<b;
assign eq = a==b;
endmodule
Test bench
module comp_4bit_tb;
reg [3:0]a,b;
wire ag,bg,eq;
comp_4bit uut (.a(a), .b(b), .ag(ag), .bg(bg),.eq(eq));
initial begin
a = 4'b1111; b = 4'b0; #10;
a = 4'b0; b = 4'b1111; #10;
a = 4'b0; b = 4'b0; #10;
$finish;
end
endmodule